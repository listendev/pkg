// Package apispec provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version 2.4.1 DO NOT EDIT.
package apispec

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/listendev/pkg/models"
	"github.com/listendev/pkg/type/int64string"
	"github.com/oapi-codegen/runtime"
)

const (
	JWTScopes = "JWT.Scopes"
)

// Defines values for JibrilConfigLogLevel.
const (
	JibrilConfigLogLevelDebug JibrilConfigLogLevel = "debug"
	JibrilConfigLogLevelError JibrilConfigLogLevel = "error"
	JibrilConfigLogLevelInfo  JibrilConfigLogLevel = "info"
	JibrilConfigLogLevelWarn  JibrilConfigLogLevel = "warn"
)

// Defines values for NetworkPolicyCidrMode.
const (
	NetworkPolicyCidrModeAlert   NetworkPolicyCidrMode = "alert"
	NetworkPolicyCidrModeBoth    NetworkPolicyCidrMode = "both"
	NetworkPolicyCidrModeBypass  NetworkPolicyCidrMode = "bypass"
	NetworkPolicyCidrModeEnforce NetworkPolicyCidrMode = "enforce"
	NetworkPolicyCidrModeNone    NetworkPolicyCidrMode = "none"
)

// Defines values for NetworkPolicyCidrPolicy.
const (
	NetworkPolicyCidrPolicyAllow NetworkPolicyCidrPolicy = "allow"
	NetworkPolicyCidrPolicyDeny  NetworkPolicyCidrPolicy = "deny"
	NetworkPolicyCidrPolicyNone  NetworkPolicyCidrPolicy = "none"
)

// Defines values for NetworkPolicyResolveMode.
const (
	NetworkPolicyResolveModeAlert   NetworkPolicyResolveMode = "alert"
	NetworkPolicyResolveModeBoth    NetworkPolicyResolveMode = "both"
	NetworkPolicyResolveModeBypass  NetworkPolicyResolveMode = "bypass"
	NetworkPolicyResolveModeEnforce NetworkPolicyResolveMode = "enforce"
	NetworkPolicyResolveModeNone    NetworkPolicyResolveMode = "none"
)

// Defines values for NetworkPolicyResolvePolicy.
const (
	NetworkPolicyResolvePolicyAllow NetworkPolicyResolvePolicy = "allow"
	NetworkPolicyResolvePolicyDeny  NetworkPolicyResolvePolicy = "deny"
	NetworkPolicyResolvePolicyNone  NetworkPolicyResolvePolicy = "none"
)

// Defines values for NetworkPolicyRulesPolicy.
const (
	Allow NetworkPolicyRulesPolicy = "allow"
	Deny  NetworkPolicyRulesPolicy = "deny"
	None  NetworkPolicyRulesPolicy = "none"
)

// DependencyEvent defines model for DependencyEvent.
type DependencyEvent struct {
	GithubContext GitHubDependencyEventContext `json:"github_context"`

	// LockFilePath Identifies the file path of the lock file used to retrieve the dependency this event is about
	LockFilePath *string `json:"lock_file_path,omitempty"`

	// Verdict The verdict of the event
	Verdict models.Verdict `json:"verdict"`
}

// DetectionEvent defines model for DetectionEvent.
type DetectionEvent struct {
	Data struct {
		Body interface{} `json:"body"`
		Head interface{} `json:"head"`

		// UniqueId Unique SHA256 identifier
		UniqueId string `json:"unique_id"`
	} `json:"data"`
	GithubContext GitHubDetectionEventContext `json:"github_context"`
	Type          string                      `human:"the detection event type" json:"type" validate:"mandatory,is_detection_event_type=case"`
}

// Error defines model for Error.
type Error struct {
	Identifier *string `json:"identifier,omitempty"`
	Message    string  `json:"message"`
}

// GitHubDependencyEventContext defines model for GitHubDependencyEventContext.
type GitHubDependencyEventContext = GitHubEventContext

// GitHubDetectionEventContext defines model for GitHubDetectionEventContext.
type GitHubDetectionEventContext = GitHubEventContext

// GitHubEventContext defines model for GitHubEventContext.
type GitHubEventContext struct {
	Action            string                  `json:"action"`
	ActionPath        *string                 `json:"action_path,omitempty"`
	ActionRepository  *string                 `json:"action_repository,omitempty"`
	Actor             string                  `json:"actor"`
	ActorId           int64string.Int64String `json:"actor_id"`
	EventName         string                  `json:"event_name"`
	Job               string                  `json:"job"`
	Ref               string                  `json:"ref"`
	RefName           string                  `json:"ref_name"`
	RefProtected      bool                    `json:"ref_protected"`
	RefType           string                  `json:"ref_type"`
	Repository        string                  `json:"repository"`
	RepositoryId      int64string.Int64String `json:"repository_id"`
	RepositoryOwner   string                  `json:"repository_owner"`
	RepositoryOwnerId int64string.Int64String `json:"repository_owner_id"`
	RunAttempt        int64string.Int64String `json:"run_attempt"`
	RunId             int64string.Int64String `json:"run_id"`
	RunNumber         int64string.Int64String `json:"run_number"`
	RunnerArch        string                  `json:"runner_arch"`
	RunnerDebug       *bool                   `json:"runner_debug,omitempty"`
	RunnerOs          string                  `json:"runner_os"`
	ServerUrl         string                  `json:"server_url"`
	Sha               string                  `json:"sha"`
	TriggeringActor   string                  `json:"triggering_actor"`
	Workflow          string                  `json:"workflow"`
	WorkflowRef       string                  `json:"workflow_ref"`
	Workspace         string                  `json:"workspace"`
}

// GitHubPipelineEventContext defines model for GitHubPipelineEventContext.
type GitHubPipelineEventContext = GitHubEventContext

// InformationalEvent defines model for InformationalEvent.
type InformationalEvent struct {
	Data struct {
		Body interface{} `json:"body"`
		Head interface{} `json:"head"`

		// UniqueId Unique SHA256 identifier
		UniqueId string `json:"unique_id"`
	} `json:"data"`
	GithubContext GitHubDetectionEventContext `json:"github_context"`
	Type          string                      `human:"the informational event type" json:"type" validate:"mandatory,is_informational_event_type=case"`
}

// JibrilConfig defines model for JibrilConfig.
type JibrilConfig struct {
	Cardinal  bool                 `json:"cardinal" yaml:"cardinal"`
	ChopLines bool                 `json:"chop-lines" yaml:"chop-lines"`
	Daemon    bool                 `json:"daemon" yaml:"daemon"`
	Event     []string             `json:"event" yaml:"event"`
	Extension []string             `json:"extension" yaml:"extension"`
	LogLevel  JibrilConfigLogLevel `json:"log-level" yaml:"log-level"`
	NoHealth  bool                 `json:"no-health" yaml:"no-health"`
	Notify    bool                 `json:"notify" yaml:"notify"`
	Plugin    []string             `json:"plugin" yaml:"plugin"`
	Printer   []string             `json:"printer" yaml:"printer"`
	Profiler  bool                 `json:"profiler" yaml:"profiler"`
	Stderr    string               `json:"stderr" yaml:"stderr"`
	Stdout    string               `json:"stdout" yaml:"stdout"`
}

// JibrilConfigLogLevel defines model for JibrilConfig.LogLevel.
type JibrilConfigLogLevel string

// NetworkPolicy defines model for NetworkPolicy.
type NetworkPolicy struct {
	// CidrMode Mode for handling CIDR traffic.
	CidrMode NetworkPolicyCidrMode `json:"cidr_mode" yaml:"cidr_mode"`

	// CidrPolicy Default policy for CIDR traffic.
	CidrPolicy NetworkPolicyCidrPolicy `json:"cidr_policy" yaml:"cidr_policy"`

	// ResolveMode Mode for handling domain resolution.
	ResolveMode NetworkPolicyResolveMode `json:"resolve_mode" yaml:"resolve_mode"`

	// ResolvePolicy Default policy for domain resolution.
	ResolvePolicy NetworkPolicyResolvePolicy `json:"resolve_policy" yaml:"resolve_policy"`

	// Rules List of network policy rules.
	Rules *[]struct {
		// Cidr CIDR range for the rule (if applicable).
		Cidr *string `json:"cidr,omitempty" yaml:"cidr,omitempty"`

		// Domain Domain for the rule (if applicable).
		Domain *string `json:"domain,omitempty" yaml:"domain,omitempty"`

		// Policy Policy for the rule.
		Policy NetworkPolicyRulesPolicy `json:"policy" yaml:"policy"`
	} `json:"rules,omitempty" yaml:"rules"`

	// Tags Tags for easy lookup in db based on repository/workflow/job.
	Tags *map[string]string `json:"tags,omitempty"`
}

// NetworkPolicyCidrMode Mode for handling CIDR traffic.
type NetworkPolicyCidrMode string

// NetworkPolicyCidrPolicy Default policy for CIDR traffic.
type NetworkPolicyCidrPolicy string

// NetworkPolicyResolveMode Mode for handling domain resolution.
type NetworkPolicyResolveMode string

// NetworkPolicyResolvePolicy Default policy for domain resolution.
type NetworkPolicyResolvePolicy string

// NetworkPolicyRulesPolicy Policy for the rule.
type NetworkPolicyRulesPolicy string

// PipelineEvent defines model for PipelineEvent.
type PipelineEvent struct {
	Data          interface{}                `json:"data"`
	GithubContext GitHubPipelineEventContext `json:"github_context"`
	Type          string                     `json:"type"`
}

// Settings defines model for Settings.
type Settings struct {
	// Policies The policies associated with the settings
	Policies map[string]struct {
		Observe *bool `json:"observe,omitempty"`
	} `bson:"policies" json:"policies"`

	// ProjectId The id of the project that the settings belongs to
	ProjectId string `bson:"project_id" json:"project_id"`

	// Tokens The tokens associated with the settings
	Tokens *map[string]struct {
		Key *string `json:"key,omitempty"`
	} `bson:"tokens" json:"tokens,omitempty"`
}

// GetNetPolicyParams defines parameters for GetNetPolicy.
type GetNetPolicyParams struct {
	// GithubRepository The owner and repository name. For example, octocat/Hello-World.
	GithubRepository string `form:"github_repository" json:"github_repository"`

	// GithubRepositoryId The GitHub repository ID.
	GithubRepositoryId string `form:"github_repository_id" json:"github_repository_id"`
}

// PostApiV1DependenciesEventJSONRequestBody defines body for PostApiV1DependenciesEvent for application/json ContentType.
type PostApiV1DependenciesEventJSONRequestBody = DependencyEvent

// PostApiV1DetectionsEventJSONRequestBody defines body for PostApiV1DetectionsEvent for application/json ContentType.
type PostApiV1DetectionsEventJSONRequestBody = DetectionEvent

// PostApiV1InformationalEventJSONRequestBody defines body for PostApiV1InformationalEvent for application/json ContentType.
type PostApiV1InformationalEventJSONRequestBody = InformationalEvent

// PostApiV1PipelineEventJSONRequestBody defines body for PostApiV1PipelineEvent for application/json ContentType.
type PostApiV1PipelineEventJSONRequestBody = PipelineEvent

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetConfig request
	GetConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1DependenciesEventWithBody request with any body
	PostApiV1DependenciesEventWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1DependenciesEvent(ctx context.Context, body PostApiV1DependenciesEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1DetectionsEventWithBody request with any body
	PostApiV1DetectionsEventWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1DetectionsEvent(ctx context.Context, body PostApiV1DetectionsEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1InformationalEventWithBody request with any body
	PostApiV1InformationalEventWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1InformationalEvent(ctx context.Context, body PostApiV1InformationalEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNetPolicy request
	GetNetPolicy(ctx context.Context, params *GetNetPolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1PipelineEventWithBody request with any body
	PostApiV1PipelineEventWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiV1PipelineEvent(ctx context.Context, body PostApiV1PipelineEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Settings request
	GetApiV1Settings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConfigRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1DependenciesEventWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DependenciesEventRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1DependenciesEvent(ctx context.Context, body PostApiV1DependenciesEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DependenciesEventRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1DetectionsEventWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DetectionsEventRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1DetectionsEvent(ctx context.Context, body PostApiV1DetectionsEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1DetectionsEventRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1InformationalEventWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1InformationalEventRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1InformationalEvent(ctx context.Context, body PostApiV1InformationalEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1InformationalEventRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNetPolicy(ctx context.Context, params *GetNetPolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNetPolicyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PipelineEventWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PipelineEventRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1PipelineEvent(ctx context.Context, body PostApiV1PipelineEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1PipelineEventRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Settings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1SettingsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetConfigRequest generates requests for GetConfig
func NewGetConfigRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1DependenciesEventRequest calls the generic PostApiV1DependenciesEvent builder with application/json body
func NewPostApiV1DependenciesEventRequest(server string, body PostApiV1DependenciesEventJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1DependenciesEventRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1DependenciesEventRequestWithBody generates requests for PostApiV1DependenciesEvent with any type of body
func NewPostApiV1DependenciesEventRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/dependencies/event")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1DetectionsEventRequest calls the generic PostApiV1DetectionsEvent builder with application/json body
func NewPostApiV1DetectionsEventRequest(server string, body PostApiV1DetectionsEventJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1DetectionsEventRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1DetectionsEventRequestWithBody generates requests for PostApiV1DetectionsEvent with any type of body
func NewPostApiV1DetectionsEventRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/detections/event")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiV1InformationalEventRequest calls the generic PostApiV1InformationalEvent builder with application/json body
func NewPostApiV1InformationalEventRequest(server string, body PostApiV1InformationalEventJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1InformationalEventRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1InformationalEventRequestWithBody generates requests for PostApiV1InformationalEvent with any type of body
func NewPostApiV1InformationalEventRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/informational/event")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNetPolicyRequest generates requests for GetNetPolicy
func NewGetNetPolicyRequest(server string, params *GetNetPolicyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/netpolicy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "github_repository", runtime.ParamLocationQuery, params.GithubRepository); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "github_repository_id", runtime.ParamLocationQuery, params.GithubRepositoryId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1PipelineEventRequest calls the generic PostApiV1PipelineEvent builder with application/json body
func NewPostApiV1PipelineEventRequest(server string, body PostApiV1PipelineEventJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiV1PipelineEventRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiV1PipelineEventRequestWithBody generates requests for PostApiV1PipelineEvent with any type of body
func NewPostApiV1PipelineEventRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/pipeline/event")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1SettingsRequest generates requests for GetApiV1Settings
func NewGetApiV1SettingsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetConfigWithResponse request
	GetConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConfigResponse, error)

	// PostApiV1DependenciesEventWithBodyWithResponse request with any body
	PostApiV1DependenciesEventWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DependenciesEventResponse, error)

	PostApiV1DependenciesEventWithResponse(ctx context.Context, body PostApiV1DependenciesEventJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1DependenciesEventResponse, error)

	// PostApiV1DetectionsEventWithBodyWithResponse request with any body
	PostApiV1DetectionsEventWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DetectionsEventResponse, error)

	PostApiV1DetectionsEventWithResponse(ctx context.Context, body PostApiV1DetectionsEventJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1DetectionsEventResponse, error)

	// PostApiV1InformationalEventWithBodyWithResponse request with any body
	PostApiV1InformationalEventWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1InformationalEventResponse, error)

	PostApiV1InformationalEventWithResponse(ctx context.Context, body PostApiV1InformationalEventJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1InformationalEventResponse, error)

	// GetNetPolicyWithResponse request
	GetNetPolicyWithResponse(ctx context.Context, params *GetNetPolicyParams, reqEditors ...RequestEditorFn) (*GetNetPolicyResponse, error)

	// PostApiV1PipelineEventWithBodyWithResponse request with any body
	PostApiV1PipelineEventWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PipelineEventResponse, error)

	PostApiV1PipelineEventWithResponse(ctx context.Context, body PostApiV1PipelineEventJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PipelineEventResponse, error)

	// GetApiV1SettingsWithResponse request
	GetApiV1SettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1SettingsResponse, error)
}

type GetConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JibrilConfig
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1DependenciesEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostApiV1DependenciesEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1DependenciesEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1DetectionsEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostApiV1DetectionsEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1DetectionsEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1InformationalEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostApiV1InformationalEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1InformationalEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNetPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkPolicy
	JSON400      *Error
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetNetPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNetPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1PipelineEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostApiV1PipelineEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1PipelineEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1SettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Settings
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetApiV1SettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1SettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetConfigWithResponse request returning *GetConfigResponse
func (c *ClientWithResponses) GetConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConfigResponse, error) {
	rsp, err := c.GetConfig(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConfigResponse(rsp)
}

// PostApiV1DependenciesEventWithBodyWithResponse request with arbitrary body returning *PostApiV1DependenciesEventResponse
func (c *ClientWithResponses) PostApiV1DependenciesEventWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DependenciesEventResponse, error) {
	rsp, err := c.PostApiV1DependenciesEventWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DependenciesEventResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1DependenciesEventWithResponse(ctx context.Context, body PostApiV1DependenciesEventJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1DependenciesEventResponse, error) {
	rsp, err := c.PostApiV1DependenciesEvent(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DependenciesEventResponse(rsp)
}

// PostApiV1DetectionsEventWithBodyWithResponse request with arbitrary body returning *PostApiV1DetectionsEventResponse
func (c *ClientWithResponses) PostApiV1DetectionsEventWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1DetectionsEventResponse, error) {
	rsp, err := c.PostApiV1DetectionsEventWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DetectionsEventResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1DetectionsEventWithResponse(ctx context.Context, body PostApiV1DetectionsEventJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1DetectionsEventResponse, error) {
	rsp, err := c.PostApiV1DetectionsEvent(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1DetectionsEventResponse(rsp)
}

// PostApiV1InformationalEventWithBodyWithResponse request with arbitrary body returning *PostApiV1InformationalEventResponse
func (c *ClientWithResponses) PostApiV1InformationalEventWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1InformationalEventResponse, error) {
	rsp, err := c.PostApiV1InformationalEventWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1InformationalEventResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1InformationalEventWithResponse(ctx context.Context, body PostApiV1InformationalEventJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1InformationalEventResponse, error) {
	rsp, err := c.PostApiV1InformationalEvent(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1InformationalEventResponse(rsp)
}

// GetNetPolicyWithResponse request returning *GetNetPolicyResponse
func (c *ClientWithResponses) GetNetPolicyWithResponse(ctx context.Context, params *GetNetPolicyParams, reqEditors ...RequestEditorFn) (*GetNetPolicyResponse, error) {
	rsp, err := c.GetNetPolicy(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNetPolicyResponse(rsp)
}

// PostApiV1PipelineEventWithBodyWithResponse request with arbitrary body returning *PostApiV1PipelineEventResponse
func (c *ClientWithResponses) PostApiV1PipelineEventWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiV1PipelineEventResponse, error) {
	rsp, err := c.PostApiV1PipelineEventWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PipelineEventResponse(rsp)
}

func (c *ClientWithResponses) PostApiV1PipelineEventWithResponse(ctx context.Context, body PostApiV1PipelineEventJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiV1PipelineEventResponse, error) {
	rsp, err := c.PostApiV1PipelineEvent(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1PipelineEventResponse(rsp)
}

// GetApiV1SettingsWithResponse request returning *GetApiV1SettingsResponse
func (c *ClientWithResponses) GetApiV1SettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1SettingsResponse, error) {
	rsp, err := c.GetApiV1Settings(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1SettingsResponse(rsp)
}

// ParseGetConfigResponse parses an HTTP response from a GetConfigWithResponse call
func ParseGetConfigResponse(rsp *http.Response) (*GetConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JibrilConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1DependenciesEventResponse parses an HTTP response from a PostApiV1DependenciesEventWithResponse call
func ParsePostApiV1DependenciesEventResponse(rsp *http.Response) (*PostApiV1DependenciesEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1DependenciesEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1DetectionsEventResponse parses an HTTP response from a PostApiV1DetectionsEventWithResponse call
func ParsePostApiV1DetectionsEventResponse(rsp *http.Response) (*PostApiV1DetectionsEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1DetectionsEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1InformationalEventResponse parses an HTTP response from a PostApiV1InformationalEventWithResponse call
func ParsePostApiV1InformationalEventResponse(rsp *http.Response) (*PostApiV1InformationalEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1InformationalEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetNetPolicyResponse parses an HTTP response from a GetNetPolicyWithResponse call
func ParseGetNetPolicyResponse(rsp *http.Response) (*GetNetPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNetPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiV1PipelineEventResponse parses an HTTP response from a PostApiV1PipelineEventWithResponse call
func ParsePostApiV1PipelineEventResponse(rsp *http.Response) (*PostApiV1PipelineEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1PipelineEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiV1SettingsResponse parses an HTTP response from a GetApiV1SettingsWithResponse call
func ParseGetApiV1SettingsResponse(rsp *http.Response) (*GetApiV1SettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1SettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Settings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get configuratoin to inject in jibril
	// (GET /api/v1/config)
	GetConfig(c *gin.Context)
	// Create a new dependency event
	// (POST /api/v1/dependencies/event)
	PostApiV1DependenciesEvent(c *gin.Context)
	// Create a new detection event
	// (POST /api/v1/detections/event)
	PostApiV1DetectionsEvent(c *gin.Context)
	// Create a new informational event
	// (POST /api/v1/informational/event)
	PostApiV1InformationalEvent(c *gin.Context)
	// Get the network policy for the current project and github_workflow_ref
	// (GET /api/v1/netpolicy)
	GetNetPolicy(c *gin.Context, params GetNetPolicyParams)
	// Create a new pipeline event
	// (POST /api/v1/pipeline/event)
	PostApiV1PipelineEvent(c *gin.Context)
	// Get the settings for the current project
	// (GET /api/v1/settings)
	GetApiV1Settings(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetConfig operation middleware
func (siw *ServerInterfaceWrapper) GetConfig(c *gin.Context) {

	c.Set(JWTScopes, []string{"project_id", "read:settings"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetConfig(c)
}

// PostApiV1DependenciesEvent operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1DependenciesEvent(c *gin.Context) {

	c.Set(JWTScopes, []string{"write:dependencyevents", "project_id"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiV1DependenciesEvent(c)
}

// PostApiV1DetectionsEvent operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1DetectionsEvent(c *gin.Context) {

	c.Set(JWTScopes, []string{"write:detectionevents", "project_id"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiV1DetectionsEvent(c)
}

// PostApiV1InformationalEvent operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1InformationalEvent(c *gin.Context) {

	c.Set(JWTScopes, []string{"write:informationalevents", "project_id"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiV1InformationalEvent(c)
}

// GetNetPolicy operation middleware
func (siw *ServerInterfaceWrapper) GetNetPolicy(c *gin.Context) {

	var err error

	c.Set(JWTScopes, []string{"project_id", "read:settings"})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetPolicyParams

	// ------------- Required query parameter "github_repository" -------------

	if paramValue := c.Query("github_repository"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument github_repository is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "github_repository", c.Request.URL.Query(), &params.GithubRepository)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter github_repository: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "github_repository_id" -------------

	if paramValue := c.Query("github_repository_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument github_repository_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "github_repository_id", c.Request.URL.Query(), &params.GithubRepositoryId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter github_repository_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetNetPolicy(c, params)
}

// PostApiV1PipelineEvent operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1PipelineEvent(c *gin.Context) {

	c.Set(JWTScopes, []string{"write:pipelineevents", "project_id"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiV1PipelineEvent(c)
}

// GetApiV1Settings operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Settings(c *gin.Context) {

	c.Set(JWTScopes, []string{"project_id", "read:settings"})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiV1Settings(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/config", wrapper.GetConfig)
	router.POST(options.BaseURL+"/api/v1/dependencies/event", wrapper.PostApiV1DependenciesEvent)
	router.POST(options.BaseURL+"/api/v1/detections/event", wrapper.PostApiV1DetectionsEvent)
	router.POST(options.BaseURL+"/api/v1/informational/event", wrapper.PostApiV1InformationalEvent)
	router.GET(options.BaseURL+"/api/v1/netpolicy", wrapper.GetNetPolicy)
	router.POST(options.BaseURL+"/api/v1/pipeline/event", wrapper.PostApiV1PipelineEvent)
	router.GET(options.BaseURL+"/api/v1/settings", wrapper.GetApiV1Settings)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
